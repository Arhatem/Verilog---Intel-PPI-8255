

module PPI ( A0 , A1 , PORTA , PORTB , PORTC , PORTD , READ , WRITE , CS , RS ) ;

       input READ , WRITE , CS , A0 , A1 , RS ;
       inout [7:0] PORTA , PORTB , PORTC , PORTD ;
       
       reg  AIO , BIO , CIO , DIO ; 
       reg [7:0] CR , RA , RB , RC , RD ;
       
       assign PORTA = (AIO)? 8'bzzzzzzzz : RA ; 
       assign PORTB = (BIO)? 8'bzzzzzzzz : RB ;
       assign PORTC = (CIO)? 8'bzzzzzzzz : RC ;
       assign PORTD = (DIO)? 8'bzzzzzzzz : RD ;
        
       always @ ( PORTD , A0 , A1 , PORTA , PORTB , PORTC , READ , WRITE , CS , RS , CR ,AIO , BIO , CIO , DIO ) begin

       if (RS==1) begin
             AIO=1 ;
	     BIO=1 ; 
             CIO=1 ;
             DIO=1 ; end
       else if (RS==0 && CS==0) begin
        
             if (A0==1 && A1==1) begin 
                 DIO=1 ;
                 CR<=PORTD ; end  //ask
             if (CR[7]==1) begin      // I/O mode    
                
                 if (A0==0 && A1==0) begin 
                     if (READ==0 && WRITE==1) begin
                          AIO=1 ; DIO=0 ; RD=PORTA ; end
                     else if (READ==1 && WRITE==0) begin AIO=0 ; DIO=1 ; RA<=PORTD ; end
                  end

                  if (A0==0 && A1==1) begin 
                     if (READ==0 && WRITE==1) begin
			 BIO=1 ; DIO=0 ; RD=PORTB; end
                     else if (READ==1 && WRITE==0) begin
 			     BIO=0 ; DIO=1 ; RB=PORTD ; end
                          end
         
                  if (A0==1 && A1==0) begin 
                     if (READ==0 && WRITE==1) begin CIO=1 ; DIO=0 ; RD=PORTC; end
                     else if (READ==1 && WRITE==0) begin  CIO=0 ; DIO=1 ; RC=PORTD ; end
                          end
                          end

              else if (CR[7]==0) begin 
                    RC [PORTD[3:1]]<=PORTD[0] ;

       



end

                end 
                   
                     end 
endmodule 





module TestBench_CHIP ();
wire [7:0] PORTA; 
wire [7:0] PORTB;
wire [7:0] PORTC;
wire [7:0] DATA;
reg CS;
reg RESET;
reg WR;
reg RD;
reg [1:0] A; // SELECTOR A0<A1
/*As inout act like wire so to use them in always
 we need adjacent variables to act like reg
 and contiousely assign them in our inout variables   */
reg[7:0] dataout;
reg[7:0] aout;
reg[7:0] bout;
reg[7:0] cout;
assign DATA = (~WR)?dataout:(~RD)?8'bzzzzzzzz:8'bzzzzzzzz;// IF Write equal 1 that mean it read so it act like outp
assign PORTA = (~RD)?aout:(~WR)?8'bzzzzzzzz:8'bzzzzzzzz;  // IF Write equal 0 that mean it act like output
assign PORTB = (~RD)?bout:(~WR)?8'bzzzzzzzz:8'bzzzzzzzz;  // IF Write equal 0 that mean it act like output
assign PORTC = (~RD)?cout:(~WR)?8'bzzzzzzzz:8'bzzzzzzzz;  // IF Write equal 0 that mean it act like output
 ( A0 , A1 , PORTA , PORTB , PORTC , PORTD , READ , WRITE , CS , RS )
PPI mychip(DATA,PORTA,PORTB,PORTC,RESET,RD,WR,CS,A);
initial 
begin
$monitor ($time ,,, " PORTA = %b   PORTB= %b   PORTC=%b     DATA= %b     RESET= %b    RD=%b     WR= %b      CS=%b      A=%b", PORTA,PORTB,PORTC,DATA,RESET,RD,WR,CS,A);
RESET=0;
CS=0;
WR=1;
RD=0;
A=2'b00;
RESET=1;
#5
RESET=0;
#5
//BSR MODE
WR=0;
RD=1;
//Set
A=2'b11;
dataout= 8'b00000001;
#5
A=2'b10;
#5
A=2'b11;
dataout= 8'b00000011;
#5
dataout= 8'b00000101;
#5
dataout= 8'b00000111;
#5
dataout= 8'b00001001;
#5
dataout= 8'b00001011;
#5
dataout= 8'b00001101;
#5
dataout= 8'b00001111;
#5
//Reset
dataout= 8'b00000000;
#5
dataout= 8'b00000010;
#5
dataout= 8'b00000100;
#5
dataout= 8'b00000110;
#5
dataout= 8'b00001000;
#5
dataout= 8'b00001010;
#5
dataout= 8'b00001100;
#5
dataout= 8'b00001110;
#5
////////////////////////////////
//i/o mode 0///////////////////
//Write on ports//////////////
/////////////////////////////
CS=0;
RESET=1;
WR=0;
RD=1;
#5
RESET=0;
#5
WR=0;
RD=1;
A=2'b11;
dataout=8'b10000000; //Port A,B and C are output
#5
A=2'b00; // Data on Port A
dataout=8'b11111111;
#5
A=2'b01; // Data on Port B
dataout=8'b11110011;
#5
A=2'b10; // Data on Port C
dataout=8'b11000000;
#5
/////////Read from ports
//reset
A=2'b11;
WR=1;
RD=0;
RESET=1;
#5
RESET=0;
#5
//RESET
RD=1;
WR=0;
A=2'b11;
dataout=8'b10011011;
A=2'b00; //PORT A, B and C are inputs
#5

RD=0; 
WR=1; 
aout=8'b10000001;
bout=8'b10110011;
cout=8'b11010101;
#5
A=2'b01; //Read from port B
#5
A=2'b10; //Read from port C
#5
//////////////////////////////////////////////////////////
//////////////Special Cases//////////////////////////////
//////////Trying to write on ports when CS=1////////////
///////////////////////////////////////////////////////
RESET=1;
CS=1;
WR=0;
RD=1;
#5
RESET=0;
#5
//////////Write on ports
WR=0;
RD=1;
A=2'b11;
dataout=8'b10000000; //Port A,B and C are output
#5
A=2'b00; // Data on Port A
dataout=8'b11111111;
#5
A=2'b01; // Data on Port B
dataout=8'b11111111;
#5
A=2'b10; // Data on Port C
dataout=8'b11111111;
end
endmodule







